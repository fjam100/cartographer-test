// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cartographer/mapping/proto/trajectory_node_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cartographer/mapping/proto/trajectory_node_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cartographer {
namespace mapping {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* TrajectoryNodeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryNodeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cartographer/mapping/proto/trajectory_node_data.proto");
  GOOGLE_CHECK(file != NULL);
  TrajectoryNodeData_descriptor_ = file->message_type(0);
  static const int TrajectoryNodeData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, gravity_alignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, filtered_gravity_aligned_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, high_resolution_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, low_resolution_point_cloud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, rotational_scan_matcher_histogram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, initial_pose_),
  };
  TrajectoryNodeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryNodeData_descriptor_,
      TrajectoryNodeData::default_instance_,
      TrajectoryNodeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryNodeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryNodeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryNodeData_descriptor_, &TrajectoryNodeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  delete TrajectoryNodeData::default_instance_;
  delete TrajectoryNodeData_reflection_;
}

void protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::cartographer::sensor::proto::protobuf_AddDesc_cartographer_2fsensor_2fproto_2fsensor_2eproto();
  ::cartographer::transform::proto::protobuf_AddDesc_cartographer_2ftransform_2fproto_2ftransform_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5cartographer/mapping/proto/trajectory_"
    "node_data.proto\022\032cartographer.mapping.pr"
    "oto\032&cartographer/sensor/proto/sensor.pr"
    "oto\032,cartographer/transform/proto/transf"
    "orm.proto\"\337\003\n\022TrajectoryNodeData\022\021\n\ttime"
    "stamp\030\001 \001(\003\022D\n\021gravity_alignment\030\002 \001(\0132)"
    ".cartographer.transform.proto.Quaternion"
    "d\022]\n$filtered_gravity_aligned_point_clou"
    "d\030\003 \001(\0132/.cartographer.sensor.proto.Comp"
    "ressedPointCloud\022T\n\033high_resolution_poin"
    "t_cloud\030\004 \001(\0132/.cartographer.sensor.prot"
    "o.CompressedPointCloud\022S\n\032low_resolution"
    "_point_cloud\030\005 \001(\0132/.cartographer.sensor"
    ".proto.CompressedPointCloud\022)\n!rotationa"
    "l_scan_matcher_histogram\030\006 \003(\002\022;\n\014initia"
    "l_pose\030\007 \001(\0132%.cartographer.transform.pr"
    "oto.Rigid3d", 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cartographer/mapping/proto/trajectory_node_data.proto", &protobuf_RegisterTypes);
  TrajectoryNodeData::default_instance_ = new TrajectoryNodeData();
  TrajectoryNodeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto {
  StaticDescriptorInitializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto() {
    protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  }
} static_descriptor_initializer_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TrajectoryNodeData::kTimestampFieldNumber;
const int TrajectoryNodeData::kGravityAlignmentFieldNumber;
const int TrajectoryNodeData::kFilteredGravityAlignedPointCloudFieldNumber;
const int TrajectoryNodeData::kHighResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kLowResolutionPointCloudFieldNumber;
const int TrajectoryNodeData::kRotationalScanMatcherHistogramFieldNumber;
const int TrajectoryNodeData::kInitialPoseFieldNumber;
#endif  // !_MSC_VER

TrajectoryNodeData::TrajectoryNodeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryNodeData::InitAsDefaultInstance() {
  gravity_alignment_ = const_cast< ::cartographer::transform::proto::Quaterniond*>(&::cartographer::transform::proto::Quaterniond::default_instance());
  filtered_gravity_aligned_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  high_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  low_resolution_point_cloud_ = const_cast< ::cartographer::sensor::proto::CompressedPointCloud*>(&::cartographer::sensor::proto::CompressedPointCloud::default_instance());
  initial_pose_ = const_cast< ::cartographer::transform::proto::Rigid3d*>(&::cartographer::transform::proto::Rigid3d::default_instance());
}

TrajectoryNodeData::TrajectoryNodeData(const TrajectoryNodeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryNodeData::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  gravity_alignment_ = NULL;
  filtered_gravity_aligned_point_cloud_ = NULL;
  high_resolution_point_cloud_ = NULL;
  low_resolution_point_cloud_ = NULL;
  initial_pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryNodeData::~TrajectoryNodeData() {
  SharedDtor();
}

void TrajectoryNodeData::SharedDtor() {
  if (this != default_instance_) {
    delete gravity_alignment_;
    delete filtered_gravity_aligned_point_cloud_;
    delete high_resolution_point_cloud_;
    delete low_resolution_point_cloud_;
    delete initial_pose_;
  }
}

void TrajectoryNodeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryNodeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryNodeData_descriptor_;
}

const TrajectoryNodeData& TrajectoryNodeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cartographer_2fmapping_2fproto_2ftrajectory_5fnode_5fdata_2eproto();
  return *default_instance_;
}

TrajectoryNodeData* TrajectoryNodeData::default_instance_ = NULL;

TrajectoryNodeData* TrajectoryNodeData::New() const {
  return new TrajectoryNodeData;
}

void TrajectoryNodeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_gravity_alignment()) {
      if (gravity_alignment_ != NULL) gravity_alignment_->::cartographer::transform::proto::Quaterniond::Clear();
    }
    if (has_filtered_gravity_aligned_point_cloud()) {
      if (filtered_gravity_aligned_point_cloud_ != NULL) filtered_gravity_aligned_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (has_high_resolution_point_cloud()) {
      if (high_resolution_point_cloud_ != NULL) high_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (has_low_resolution_point_cloud()) {
      if (low_resolution_point_cloud_ != NULL) low_resolution_point_cloud_->::cartographer::sensor::proto::CompressedPointCloud::Clear();
    }
    if (has_initial_pose()) {
      if (initial_pose_ != NULL) initial_pose_->::cartographer::transform::proto::Rigid3d::Clear();
    }
  }
  rotational_scan_matcher_histogram_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryNodeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gravity_alignment;
        break;
      }

      // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gravity_alignment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gravity_alignment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_filtered_gravity_aligned_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filtered_gravity_aligned_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filtered_gravity_aligned_point_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_high_resolution_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high_resolution_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high_resolution_point_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_low_resolution_point_cloud;
        break;
      }

      // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low_resolution_point_cloud:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low_resolution_point_cloud()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rotational_scan_matcher_histogram;
        break;
      }

      // repeated float rotational_scan_matcher_histogram = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotational_scan_matcher_histogram:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_rotational_scan_matcher_histogram())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_rotational_scan_matcher_histogram())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rotational_scan_matcher_histogram;
        if (input->ExpectTag(58)) goto parse_initial_pose;
        break;
      }

      // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initial_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initial_pose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryNodeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (has_gravity_alignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gravity_alignment(), output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (has_filtered_gravity_aligned_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->filtered_gravity_aligned_point_cloud(), output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (has_high_resolution_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->high_resolution_point_cloud(), output);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (has_low_resolution_point_cloud()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->low_resolution_point_cloud(), output);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  for (int i = 0; i < this->rotational_scan_matcher_histogram_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->rotational_scan_matcher_histogram(i), output);
  }

  // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
  if (has_initial_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->initial_pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryNodeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
  if (has_gravity_alignment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gravity_alignment(), target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
  if (has_filtered_gravity_aligned_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->filtered_gravity_aligned_point_cloud(), target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
  if (has_high_resolution_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->high_resolution_point_cloud(), target);
  }

  // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
  if (has_low_resolution_point_cloud()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->low_resolution_point_cloud(), target);
  }

  // repeated float rotational_scan_matcher_histogram = 6;
  for (int i = 0; i < this->rotational_scan_matcher_histogram_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->rotational_scan_matcher_histogram(i), target);
  }

  // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
  if (has_initial_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->initial_pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryNodeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional .cartographer.transform.proto.Quaterniond gravity_alignment = 2;
    if (has_gravity_alignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gravity_alignment());
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud filtered_gravity_aligned_point_cloud = 3;
    if (has_filtered_gravity_aligned_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filtered_gravity_aligned_point_cloud());
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud high_resolution_point_cloud = 4;
    if (has_high_resolution_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high_resolution_point_cloud());
    }

    // optional .cartographer.sensor.proto.CompressedPointCloud low_resolution_point_cloud = 5;
    if (has_low_resolution_point_cloud()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low_resolution_point_cloud());
    }

    // optional .cartographer.transform.proto.Rigid3d initial_pose = 7;
    if (has_initial_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initial_pose());
    }

  }
  // repeated float rotational_scan_matcher_histogram = 6;
  {
    int data_size = 0;
    data_size = 4 * this->rotational_scan_matcher_histogram_size();
    total_size += 1 * this->rotational_scan_matcher_histogram_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryNodeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryNodeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryNodeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryNodeData::MergeFrom(const TrajectoryNodeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rotational_scan_matcher_histogram_.MergeFrom(from.rotational_scan_matcher_histogram_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_gravity_alignment()) {
      mutable_gravity_alignment()->::cartographer::transform::proto::Quaterniond::MergeFrom(from.gravity_alignment());
    }
    if (from.has_filtered_gravity_aligned_point_cloud()) {
      mutable_filtered_gravity_aligned_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.filtered_gravity_aligned_point_cloud());
    }
    if (from.has_high_resolution_point_cloud()) {
      mutable_high_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.high_resolution_point_cloud());
    }
    if (from.has_low_resolution_point_cloud()) {
      mutable_low_resolution_point_cloud()->::cartographer::sensor::proto::CompressedPointCloud::MergeFrom(from.low_resolution_point_cloud());
    }
    if (from.has_initial_pose()) {
      mutable_initial_pose()->::cartographer::transform::proto::Rigid3d::MergeFrom(from.initial_pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryNodeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryNodeData::CopyFrom(const TrajectoryNodeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryNodeData::IsInitialized() const {

  return true;
}

void TrajectoryNodeData::Swap(TrajectoryNodeData* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(gravity_alignment_, other->gravity_alignment_);
    std::swap(filtered_gravity_aligned_point_cloud_, other->filtered_gravity_aligned_point_cloud_);
    std::swap(high_resolution_point_cloud_, other->high_resolution_point_cloud_);
    std::swap(low_resolution_point_cloud_, other->low_resolution_point_cloud_);
    rotational_scan_matcher_histogram_.Swap(&other->rotational_scan_matcher_histogram_);
    std::swap(initial_pose_, other->initial_pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryNodeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryNodeData_descriptor_;
  metadata.reflection = TrajectoryNodeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mapping
}  // namespace cartographer

// @@protoc_insertion_point(global_scope)
